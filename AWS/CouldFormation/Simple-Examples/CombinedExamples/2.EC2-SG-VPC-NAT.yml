AWSTemplateFormatVersion: "2010-09-09"
Description: A simple template to create 1 VPC, 1 private and 2 public subnets, 1 provate and public route table, 1 igw, 1 natgateway and 1 private , 1 public EC2 instance - finally printing the output values
Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties: 
       CidrBlock: 10.1.0.0/16
       EnableDnsSupport: true
       EnableDnsHostnames: true
       Tags:
       - Key: Name
         Value: !Sub "${AWS::StackName}-MyVPC"
        
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
       Tags:
       - Key: Name
         Value: !Sub "${AWS::StackName}-MyIGW"
    
  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref MyVPC
  
  NATGateway:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
        - ElasticIP
        - AllocationId
      SubnetId:
        Ref: Subnet01
      Tags:
        -
          Key: Name
          Value: !Sub "${AWS::StackName}-NAT"
  ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-Public Subnets"
      - Key: Network
        Value: Public
        
  PublicRoute:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PrivRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-Private Subnets"
      - Key: Network
        Value: Private
        
  PrivateRoute:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  Subnet01:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 01
    Properties:
      AvailabilityZone: us-east-1a
      CidrBlock: 10.1.1.0/28
      MapPublicIpOnLaunch: true
      VpcId:
        Ref: MyVPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-pub Subnet01"

  Subnet02:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 02
    Properties:
      AvailabilityZone: us-east-1b
      CidrBlock: 10.1.2.0/28
      VpcId:
        Ref: MyVPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-pub Subnet02"
      
  Subnet03:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 03
    Properties:
      AvailabilityZone: us-east-1c
      CidrBlock: 10.1.3.0/28
      VpcId:
        Ref: MyVPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-priv Subnet03"

  Subnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet01
      RouteTableId: !Ref PublicRouteTable

  Subnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet02
      RouteTableId: !Ref PublicRouteTable

  Subnet03RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet03
      RouteTableId: !Ref PrivRouteTable

  MySG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-SampleSG"
      GroupDescription: VPC specific SG
      VpcId: !Ref MyVPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-MySG"
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: 176.34.159.192/26
          FromPort: '443'
          ToPort: '443'
        - IpProtocol: tcp
          CidrIp: 177.71.207.128/26
          FromPort: '80'
          ToPort: '80'
      SecurityGroupEgress:
        - IpProtocol: tcp
          CidrIp: 176.34.159.192/26
          FromPort: '443'
          ToPort: '443'
        - IpProtocol: tcp
          CidrIp: 177.71.207.128/26
          FromPort: '80'
          ToPort: '80'

  pubnetworkIn:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref Subnet01
      Description: public network for public instance
      GroupSet: 
      - !Ref MySG
      SourceDestCheck: true
      Tags:
        -
          Key: Network
          Value: Web

  MyPublicEC2Instance:
    Type: "AWS::EC2::Instance"
    Properties: 
      ImageId: "ami-035be7bafff33b6b6"
      InstanceType: t2.micro
      KeyName: aws-desk
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-Pub Instance"
      NetworkInterfaces:
        -
          NetworkInterfaceId: !Ref pubnetworkIn
          DeviceIndex: 0
      BlockDeviceMappings:
        -
          DeviceName: /dev/xvda
          Ebs:
            VolumeType: io1
            Iops: 200
            DeleteOnTermination: true
            VolumeSize: 10
      
  privateworkIn:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref Subnet03
      Description: private network for private instance
      GroupSet: 
      - !Ref MySG
      SourceDestCheck: true
      Tags:
        -
          Key: Network
          Value: db

  MyPrivateEC2Instance:
    Type: "AWS::EC2::Instance"
    Properties: 
      ImageId: "ami-035be7bafff33b6b6"
      InstanceType: t2.micro
      KeyName: aws-desk
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-MyInstance"
      NetworkInterfaces:
        -
          NetworkInterfaceId: !Ref privateworkIn
          DeviceIndex: 0
      BlockDeviceMappings:
        -
          DeviceName: /dev/xvda
          Ebs:
            VolumeType: io1
            Iops: 200
            DeleteOnTermination: true
            VolumeSize: 10

Outputs:

  VpcId:
    Description: The VPC Id
    Value: !Ref MyVPC

  SubnetIds:
    Description: All subnet ids
    Value: !Join [ ",", [ !Ref Subnet01, !Ref Subnet02, !Ref Subnet03 ] ]

  SecurityGroups:
    Description: Security group
    Value: !Ref MySG
    
  PublicInstanceId:
    Description: Instance Details
    Value: !Ref MyPublicEC2Instance

  PublicInstanceId:
    Description: Instance Details
    Value: !Ref MyPrivateEC2Instance
